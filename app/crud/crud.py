"""Database helper utilities for the Words2Frame backend."""

from __future__ import annotations

from collections import Counter
from datetime import datetime, timedelta
from typing import Iterable, Optional

from sqlalchemy.orm import Session

from app.models.models import (
    Actor,
    Crew,
    Finance,
    GlobalScript,
    Project,
    Property,
    Reminder,
    ScheduleEntry,
    Scene,
    Script,
    Task,
    ToDo,
    User,
)


DEFAULT_CREW_ROLES = [
    ("Director", "Leads creative vision"),
    ("Cinematographer", "Camera and lighting lead"),
    ("Production Designer", "Visual styling & sets"),
    ("Sound Designer", "Audio and mixing"),
    ("Editor", "Story edit and pacing"),
    ("VFX Lead", "Visual effects supervision"),
]


# ---------------------------------------------------------------------------
# Project helpers
# ---------------------------------------------------------------------------


def create_project(
    db: Session,
    name: str,
    description: Optional[str],
    budget: float,
    owner_id: Optional[int] = None,
) -> Project:
    project = Project(name=name, description=description, budget=budget, owner_id=owner_id)
    db.add(project)
    db.commit()
    db.refresh(project)
    return project


def get_projects(db: Session) -> Iterable[Project]:
    return db.query(Project).all()


def get_projects_for_user(db: Session, user_id: int) -> Iterable[Project]:
    return db.query(Project).filter(Project.owner_id == user_id).all()


def get_project_by_id(db: Session, project_id: int) -> Optional[Project]:
    return db.query(Project).filter(Project.id == project_id).first()


def update_project_budget(db: Session, project_id: int, new_budget: float) -> Optional[Project]:
    project = get_project_by_id(db, project_id)
    if project:
        project.budget = new_budget
        db.commit()
        db.refresh(project)
    return project


def get_or_create_default_project(db: Session, user: User) -> Project:
    project = (
        db.query(Project)
        .filter(Project.owner_id == user.id)
        .order_by(Project.id.asc())
        .first()
    )
    if project:
        return project
    return create_project(
        db,
        name=f"{user.username}'s AI Production",
        description="Workspace generated by Words2Frame AI",
        budget=750_000.0,
        owner_id=user.id,
    )


# ---------------------------------------------------------------------------
# Crew helpers
# ---------------------------------------------------------------------------


def create_crew(db: Session, name: str, role: str, project_id: Optional[int] = None) -> Crew:
    crew = Crew(name=name, role=role, project_id=project_id)
    db.add(crew)
    db.commit()
    db.refresh(crew)
    return crew


def get_crews(db: Session) -> Iterable[Crew]:
    return db.query(Crew).all()


def get_crews_by_project(db: Session, project_id: int) -> Iterable[Crew]:
    return db.query(Crew).filter((Crew.project_id == project_id) | (Crew.project_id.is_(None))).all()


def ensure_default_crew(db: Session, project_id: int) -> Iterable[Crew]:
    existing_roles = {crew.role for crew in get_crews_by_project(db, project_id)}
    created = []
    for role, description in DEFAULT_CREW_ROLES:
        if role not in existing_roles:
            created.append(create_crew(db, name=role, role=description, project_id=project_id))
    return created


def get_crew_by_id(db: Session, crew_id: int) -> Optional[Crew]:
    return db.query(Crew).filter(Crew.id == crew_id).first()


def delete_crew(db: Session, crew_id: int) -> bool:
    crew = get_crew_by_id(db, crew_id)
    if not crew:
        return False
    db.delete(crew)
    db.commit()
    return True


# ---------------------------------------------------------------------------
# Task & finance helpers
# ---------------------------------------------------------------------------


def create_task(db: Session, title: str, project_id: int, crew_id: int) -> Task:
    task = Task(title=title, project_id=project_id, crew_id=crew_id)
    db.add(task)
    db.commit()
    db.refresh(task)
    return task


def get_tasks(db: Session) -> Iterable[Task]:
    return db.query(Task).all()


def create_finance(db: Session, project_id: int, amount_spent: float, description: str) -> Finance:
    finance = Finance(project_id=project_id, amount_spent=amount_spent, description=description)
    db.add(finance)
    db.commit()
    db.refresh(finance)
    return finance


def get_finances(db: Session) -> Iterable[Finance]:
    return db.query(Finance).all()


# ---------------------------------------------------------------------------
# User helpers
# ---------------------------------------------------------------------------


def create_user(db: Session, username: str, email: str, is_admin: bool = False) -> User:
    user = User(username=username, email=email, is_admin=is_admin)
    db.add(user)
    db.commit()
    db.refresh(user)
    return user


def create_user_with_password(
    db: Session,
    username: str,
    email: str,
    password: str,
    is_admin: bool = False,
) -> User:
    from app.auth import get_password_hash

    pw_hash = get_password_hash(password)
    user = User(username=username, email=email, is_admin=is_admin, password_hash=pw_hash)
    db.add(user)
    db.commit()
    db.refresh(user)
    return user


# ---------------------------------------------------------------------------
# Scripts & scenes
# ---------------------------------------------------------------------------


def create_script(db: Session, project_id: int, filename: str, filepath: str) -> Script:
    script = Script(project_id=project_id, filename=filename, filepath=filepath)
    db.add(script)
    db.commit()
    db.refresh(script)
    return script


def get_latest_script(db: Session, project_id: int) -> Optional[Script]:
    return (
        db.query(Script)
        .filter(Script.project_id == project_id)
        .order_by(Script.uploaded_at.desc())
        .first()
    )


def delete_scripts_for_project(db: Session, project_id: int) -> None:
    db.query(Script).filter(Script.project_id == project_id).delete()
    db.commit()


def create_scene(
    db: Session,
    project_id: int,
    index: int,
    heading: Optional[str] = None,
    description: Optional[str] = None,
) -> Scene:
    scene = Scene(project_id=project_id, index=index, heading=heading, description=description)
    db.add(scene)
    db.commit()
    db.refresh(scene)
    return scene


def get_scenes_by_project(db: Session, project_id: int) -> Iterable[Scene]:
    return db.query(Scene).filter(Scene.project_id == project_id).order_by(Scene.index.asc()).all()


def get_scene_by_id(db: Session, scene_id: int) -> Optional[Scene]:
    return db.query(Scene).filter(Scene.id == scene_id).first()


def update_scene(db: Session, scene_id: int, **kwargs) -> Optional[Scene]:
    scene = get_scene_by_id(db, scene_id)
    if not scene:
        return None
    for key, value in kwargs.items():
        if hasattr(scene, key):
            setattr(scene, key, value)
    db.commit()
    db.refresh(scene)
    return scene


def clear_project_analysis(db: Session, project_id: int) -> None:
    db.query(Scene).filter(Scene.project_id == project_id).delete()
    db.query(ToDo).filter(ToDo.project_id == project_id).delete()
    db.query(Actor).filter(Actor.project_id == project_id).delete()
    db.query(Property).filter(Property.project_id == project_id).delete()
    db.query(ScheduleEntry).filter(ScheduleEntry.project_id == project_id).delete()
    db.commit()


# ---------------------------------------------------------------------------
# To-do helpers
# ---------------------------------------------------------------------------


def create_todo(
    db: Session,
    project_id: int,
    title: str,
    description: Optional[str] = None,
    is_post_production: bool = False,
) -> ToDo:
    todo = ToDo(
        project_id=project_id,
        title=title,
        description=description,
        is_post_production=is_post_production,
    )
    db.add(todo)
    db.commit()
    db.refresh(todo)
    return todo


def get_todos_by_project(db: Session, project_id: int) -> Iterable[ToDo]:
    return db.query(ToDo).filter(ToDo.project_id == project_id).order_by(ToDo.id.asc()).all()


def get_todo_by_id(db: Session, todo_id: int) -> Optional[ToDo]:
    return db.query(ToDo).filter(ToDo.id == todo_id).first()


def update_todo(db: Session, todo_id: int, **kwargs) -> Optional[ToDo]:
    todo = get_todo_by_id(db, todo_id)
    if not todo:
        return None
    for key, value in kwargs.items():
        if hasattr(todo, key):
            setattr(todo, key, value)
    db.commit()
    db.refresh(todo)
    return todo


def delete_todo(db: Session, todo_id: int) -> bool:
    todo = get_todo_by_id(db, todo_id)
    if not todo:
        return False
    db.delete(todo)
    db.commit()
    return True


# ---------------------------------------------------------------------------
# Actor / property helpers
# ---------------------------------------------------------------------------


def create_actor(db: Session, project_id: int, name: str, cost: float = 0.0) -> Actor:
    actor = Actor(project_id=project_id, name=name, cost=cost)
    db.add(actor)
    db.commit()
    db.refresh(actor)
    return actor


def create_property(db: Session, project_id: int, name: str, cost: float = 0.0) -> Property:
    prop = Property(project_id=project_id, name=name, cost=cost)
    db.add(prop)
    db.commit()
    db.refresh(prop)
    return prop


def get_actors_by_project(db: Session, project_id: int) -> Iterable[Actor]:
    return db.query(Actor).filter(Actor.project_id == project_id).order_by(Actor.id.asc()).all()


def get_properties_by_project(db: Session, project_id: int) -> Iterable[Property]:
    return db.query(Property).filter(Property.project_id == project_id).order_by(Property.id.asc()).all()


# ---------------------------------------------------------------------------
# Schedule & reminders
# ---------------------------------------------------------------------------


def create_schedule_entry(db: Session, project_id: int, task: str, dates_json: str) -> ScheduleEntry:
    schedule = ScheduleEntry(project_id=project_id, task=task, dates_json=dates_json)
    db.add(schedule)
    db.commit()
    db.refresh(schedule)
    return schedule


def get_schedule_by_project(db: Session, project_id: int) -> Iterable[ScheduleEntry]:
    return db.query(ScheduleEntry).filter(ScheduleEntry.project_id == project_id).order_by(ScheduleEntry.id.asc()).all()


def create_reminder(db: Session, project_id: int, remind_date: str, message: str) -> Reminder:
    reminder = Reminder(project_id=project_id, remind_date=remind_date, message=message)
    db.add(reminder)
    db.commit()
    db.refresh(reminder)
    return reminder


def get_reminders_by_project(db: Session, project_id: int) -> Iterable[Reminder]:
    return db.query(Reminder).filter(Reminder.project_id == project_id).order_by(Reminder.id.asc()).all()


# ---------------------------------------------------------------------------
# Analysis helpers
# ---------------------------------------------------------------------------


def summarise_characters(scenes: Iterable[Scene]) -> Counter:
    counts: Counter = Counter()
    for scene in scenes:
        if not scene.description:
            continue
        tokens = {
            token
            for token in scene.description.split()
            if token.isalpha() and token.isupper() and len(token) > 2
        }
        counts.update(tokens)
    return counts


def derive_schedule_date(scene_index: int) -> str:
    shoot_day = datetime.utcnow().date() + timedelta(days=scene_index)
    return shoot_day.isoformat()


def summarise_locations(scenes: Iterable[Scene]) -> Iterable[str]:
    for scene in scenes:
        if scene.suggested_location:
            yield scene.suggested_location
        elif scene.heading:
            yield scene.heading


# --------------------------------------------------------------------------- 
# Global Script helpers
# ---------------------------------------------------------------------------

def create_global_script(db: Session, filename: str, content: str, uploaded_by: Optional[int] = None) -> GlobalScript:
    existing = get_global_script_by_filename(db, filename)
    if existing:
        existing.content = content
        existing.uploaded_by = uploaded_by
        existing.uploaded_at = datetime.utcnow()
        db.commit()
        db.refresh(existing)
        return existing

    script = GlobalScript(filename=filename, content=content, uploaded_by=uploaded_by)
    db.add(script)
    db.commit()
    db.refresh(script)
    return script

def get_global_script_by_filename(db: Session, filename: str) -> Optional[GlobalScript]:
    return db.query(GlobalScript).filter(GlobalScript.filename == filename).first()

def get_all_global_scripts(db: Session) -> list[GlobalScript]:
    return db.query(GlobalScript).order_by(GlobalScript.uploaded_at.desc()).all()


def calculate_project_budget(db: Session, project_id: int) -> float:
    project = get_project_by_id(db, project_id)
    return project.budget if project else 0.0


def get_finances_by_project(db: Session, project_id: int) -> list[Finance]:
    return db.query(Finance).filter(Finance.project_id == project_id).all()


def get_budget_per_scene(db: Session, project_id: int) -> list[dict]:
    scenes = get_scenes_by_project(db, project_id)
    return [{"scene": scene.heading or f"Scene {scene.index}", "budget": scene.predicted_budget} for scene in scenes]


def get_project_completion_status(db: Session, project_id: int) -> dict:
    scenes = get_scenes_by_project(db, project_id)
    total_scenes = len(scenes)
    completed_scenes = sum(1 for scene in scenes if scene.progress_status == "completed")
    return {
        "total_scenes": total_scenes,
        "completed_scenes": completed_scenes,
        "completion_percentage": (completed_scenes / total_scenes * 100) if total_scenes > 0 else 0
    }
